<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.ChatMsgRecordMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.model.ChatMsgRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="receivename" jdbcType="VARCHAR" property="receivename" />
    <result column="sendname" jdbcType="VARCHAR" property="sendname" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="addtime" jdbcType="TIMESTAMP" property="addtime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.demo.model.ChatMsgRecord">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, receivename, sendname, type, addtime
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.demo.model.ChatMsgRecordExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from chatmsgrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.demo.model.ChatMsgRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from chatmsgrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from chatmsgrecord
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from chatmsgrecord
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.model.ChatMsgRecordExample">
    delete from chatmsgrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.ChatMsgRecord">
    insert into chatmsgrecord (id, receivename, sendname, 
      type, addtime, content
      )
    values (#{id,jdbcType=INTEGER}, #{receivename,jdbcType=VARCHAR}, #{sendname,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{addtime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.ChatMsgRecord">
    insert into chatmsgrecord
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="receivename != null">
        receivename,
      </if>
      <if test="sendname != null">
        sendname,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="addtime != null">
        addtime,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="receivename != null">
        #{receivename,jdbcType=VARCHAR},
      </if>
      <if test="sendname != null">
        #{sendname,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="addtime != null">
        #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.model.ChatMsgRecordExample" resultType="java.lang.Long">
    select count(*) from chatmsgrecord
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update chatmsgrecord
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.receivename != null">
        receivename = #{record.receivename,jdbcType=VARCHAR},
      </if>
      <if test="record.sendname != null">
        sendname = #{record.sendname,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.addtime != null">
        addtime = #{record.addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update chatmsgrecord
    set id = #{record.id,jdbcType=INTEGER},
      receivename = #{record.receivename,jdbcType=VARCHAR},
      sendname = #{record.sendname,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update chatmsgrecord
    set id = #{record.id,jdbcType=INTEGER},
      receivename = #{record.receivename,jdbcType=VARCHAR},
      sendname = #{record.sendname,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.ChatMsgRecord">
    update chatmsgrecord
    <set>
      <if test="receivename != null">
        receivename = #{receivename,jdbcType=VARCHAR},
      </if>
      <if test="sendname != null">
        sendname = #{sendname,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="addtime != null">
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.demo.model.ChatMsgRecord">
    update chatmsgrecord
    set receivename = #{receivename,jdbcType=VARCHAR},
      sendname = #{sendname,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      addtime = #{addtime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.ChatMsgRecord">
    update chatmsgrecord
    set receivename = #{receivename,jdbcType=VARCHAR},
      sendname = #{sendname,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      addtime = #{addtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectBySendName" resultType="com.example.demo.model.ChatMsgRecord">
    select * from chatmsgrecord where sendname = #{arg0} and receivename = #{arg1}
  </select>
    <select id="selectCountBySendName" resultType="int">
    select count(*) from chatmsgrecord where sendname = #{arg0} and receivename = #{arg1} and type = 1
  </select>
    <update id="already">
        update chatmsgrecord set type = 2 where sendname = #{arg0} and receivename = #{arg1} and type = 1
    </update>
  <insert id="saveRecord" parameterType="com.example.demo.model.ChatMsgRecord">
    insert into chatmsgrecord (receivename, sendname, type, content, addtime)
    values (#{receivename},#{sendname},#{type},#{content},#{addtime})
  </insert>
  <delete id="deleteRecord">
  delete from chatmsgrecord where sendname = #{arg0} and receivename = #{arg1}
  </delete>
</mapper>